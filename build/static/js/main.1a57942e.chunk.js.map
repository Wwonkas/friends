{"version":3,"sources":["components/Card.js","components/List.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","List","robots","StrictMode","map","user","i","SearchBox","search","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","boxShadow","children","App","SearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filterFriends","filter","friends","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"8MAeeA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAExB,OACI,sBAAKC,UAAU,mDAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAA1B,mBACtB,gCACI,6BAAKF,IACL,4BAAIC,WCOLK,EAdF,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAGX,OACA,eAAC,IAAMC,WAAP,eACID,EAAOE,KAAI,SAACC,EAAMC,GAClB,OAAQ,cAAC,EAAD,CAAcT,GAAIK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGX,KAAMC,MAAOM,EAAOI,GAAGV,OAA5DU,UCQZC,EAfG,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAGhB,OACI,qBAAKV,UAAU,MAAf,SACI,uBACAA,UAAU,mCACVW,KAAK,SACLC,YAAY,iBACZC,SAAUH,OCDPI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAQ,+BAAgCC,OAAO,QAASC,UAAU,8CAAnG,SACKL,EAAMM,YCgDJC,E,kDA3CX,aAAe,IAAD,8BACV,gBAeJC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAfzC,EAAKC,MAAQ,CACTzB,OAAQ,GACRsB,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACrB,OAAQ8B,S,oBAS9C,WAAU,IAAD,EAC2BC,KAAKN,MAA7BzB,EADH,EACGA,OAAQsB,EADX,EACWA,YACVU,EAAiChC,EAAOiC,QAAO,SAAAC,GACjD,OAAOA,EAAQzC,KAAK0C,cAAcC,SAA0Bd,EAAYa,kBAE5E,OAAuC,IAAlBnC,EAAOqC,OACjB,yCAKH,cAFA,CAEA,OAAKzC,UAAU,KAAf,UACQ,yCACA,cAAC,EAAD,CAAWU,OAAQyB,KAAKZ,eACxB,cAAC,EAAD,UACI,cAAC,EAAD,CAAMnB,OAAQgC,a,GArCxBM,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OACP,cAAC,IAAM/C,WAAP,UACI,cAAC,EAAD,MAEJgD,SAASC,eAAe,SAM1BX,M","file":"static/js/main.1a57942e.chunk.js","sourcesContent":["import React from 'react';\r\n//we need to import react so that our program undestands JSX\r\n\r\nconst Card = ({name, email, id}) => {\r\n    //const {name, email, id} = props;\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='friends' src={`https://robohash.org/${id}?size=200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst List = ({robots}) => {\r\n    //const cardComponent = robots.map((user, i) => {\r\n        //return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n    return (\r\n    <React.StrictMode> {\r\n        robots.map((user, i) => {\r\n        return (<Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n        );\r\n        })\r\n    }\r\n    </React.StrictMode>\r\n    );\r\n}\r\n\r\nexport default List;","import React from 'react';\r\n\r\nconst SearchBox = ({search}) => {\r\n//we are using DESTRUCTURING ({...}) - allows us to grab\r\n//the props object and grab its properties\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n            className='pa3 ba b--green bg-lightest-blue'\r\n            type='search'\r\n            placeholder='search friends' \r\n            onChange={search}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY:'scroll', border: '3px solid rgba(0, 0, 0, 0.3)', height:'900px', boxShadow:'inset 0px 0px 40px 10px rgba(0, 0, 0, 0.6)'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport List from '../components/List';\r\nimport SearchBox from '../components/SearchBox';\r\n//import { robots } from '../components/robots';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({robots: users}));\r\n    }\r\n    \r\n    //anytime you make your own methods on a component use arrow\r\n    // function syntax\r\n    SearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n    \r\n    render() {\r\n        const { robots, searchfield } = this.state;\r\n        const filterFriends = /* this.state. */robots.filter(friends => {\r\n            return friends.name.toLowerCase().includes(/* this.state. */searchfield.toLowerCase())\r\n        })\r\n        if (/* this.state. */robots.length === 0)/* (!robots.length) */ {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n            return (\r\n                // WITHOUT IF ELSE: return !robots.length ? <h1>Loading</h1> : (<div....)\r\n\r\n                <div className='tc'>\r\n                        <h1>Friends</h1>\r\n                        <SearchBox search={this.SearchChange}/>\r\n                        <Scroll>\r\n                            <List robots={filterFriends}/>\r\n                        </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n//STATE - the description of the app - an object that describes the app\r\n// and able to change and affect the app \r\n//(PROPS are things that come out of STATE)","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';\nimport App from './containers/App';\n//import List from './List';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}